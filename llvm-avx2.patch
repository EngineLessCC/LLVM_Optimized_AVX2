diff --git a/build/config/compiler/BUILD.gn b/build/config/compiler/BUILD.gn
index 80bc79e5fb350..b9243ed099a48 100644
--- a/build/config/compiler/BUILD.gn
+++ b/build/config/compiler/BUILD.gn
@@ -497,10 +497,10 @@ config("compiler") {
   # Linux/Android/Fuchsia common flags setup.
   # ---------------------------------
   if (is_linux || is_chromeos || is_android || is_fuchsia) {
-    asmflags += [ "-fPIC" ]
-    cflags += [ "-fPIC" ]
-    ldflags += [ "-fPIC" ]
-    rustflags += [ "-Crelocation-model=pic" ]
+    asmflags += [ "-fPIC", "-w", ]
+    cflags += [ "-fPIC", "-w", ]
+    ldflags += [ "-fPIC", "-w", ]
+    rustflags += [ "-Crelocation-model=pic", "-Awarnings", ]
 
     if (!is_clang) {
       # Use pipes for communicating between sub-processes. Faster.
@@ -605,8 +605,8 @@ config("compiler") {
     # TODO(hans): Remove this once Clang generates better optimized debug info
     # by default. https://crbug.com/765793
     cflags += [
-      "-mllvm",
-      "-instcombine-lower-dbg-declare=0",
+      # "-mllvm",
+      # "-instcombine-lower-dbg-declare=0",
     ]
     if (!is_debug && use_thin_lto && is_a_target_toolchain) {
       if (is_win) {
@@ -622,8 +622,8 @@ config("compiler") {
     if (default_toolchain != "//build/toolchain/cros:target" &&
         !llvm_android_mainline) {
       cflags += [
-        "-mllvm",
-        "-split-threshold-for-reg-with-hint=0",
+        # "-mllvm",
+        # "-split-threshold-for-reg-with-hint=0",
       ]
       if (use_thin_lto && is_a_target_toolchain) {
         if (is_win) {
@@ -638,7 +638,7 @@ config("compiler") {
     if (is_win) {
       cflags += [ "/clang:-ffp-contract=off" ]
     } else {
-      cflags += [ "-ffp-contract=off" ]
+      cflags += [ "-ffp-contract=fast" ]
     }
   }
 
@@ -1022,6 +1022,10 @@ config("compiler") {
     # For deterministic builds, keep the local machine's current working
     # directory from appearing in build outputs.
     "-Zremap-cwd-prefix=.",
+
+    "-Ctarget-cpu=znver2",
+    "-Ctarget-feature=+sse3,+ssse3,+sse4.1,+sse4.2,+avx,+avx2,+fma",
+    "-Cllvm-args=-fp-contract=fast",
   ]
 
   if (!is_win || force_rustc_color_output) {
@@ -1074,12 +1078,13 @@ config("compiler") {
 # building with ThinLTO, no optimization is performed in the link step.
 config("thinlto_optimize_default") {
   if (!is_debug && use_thin_lto && is_a_target_toolchain) {
-    lto_opt_level = 0
+    lto_opt_level = 3
 
     if (is_win) {
       ldflags = [ "/opt:lldlto=" + lto_opt_level ]
     } else {
       ldflags = [ "-Wl,--lto-O" + lto_opt_level ]
+      ldflags += [ "-Wl,--lto-CGO" + lto_opt_level ]
     }
 
     if (toolchain_supports_rust_thin_lto) {
@@ -1105,15 +1110,16 @@ config("thinlto_optimize_default") {
 config("thinlto_optimize_max") {
   if (!is_debug && use_thin_lto && is_a_target_toolchain) {
     if (thin_lto_enable_optimizations) {
-      lto_opt_level = 2
+      lto_opt_level = 3
     } else {
-      lto_opt_level = 0
+      lto_opt_level = 3
     }
 
     if (is_win) {
       ldflags = [ "/opt:lldlto=" + lto_opt_level ]
     } else {
       ldflags = [ "-Wl,--lto-O" + lto_opt_level ]
+      ldflags += [ "-Wl,--lto-CGO" + lto_opt_level ]
     }
 
     if (toolchain_supports_rust_thin_lto) {
@@ -1149,7 +1155,8 @@ config("compiler_cpu_abi") {
     if (current_cpu == "x64") {
       cflags += [
         "-m64",
-        "-msse3",
+        "-march=znver2",
+        "-msse3", "-mssse3", "-msse4.1", "-msse4.2", "-mavx", "-mavx2", "-mfma",
       ]
 
       # Minimum SIMD support for devices running lacros.
@@ -2288,6 +2295,75 @@ if (is_win) {
   common_optimize_on_cflags = []
   common_optimize_on_ldflags = []
 
+  common_optimize_on_cflags += [
+    "-zopt",
+    "-fvectorize",
+    "-fslp-vectorize",
+    "-floop-transform",
+    "-faggressive-loop-transform",
+    "-fvector-transform",
+    "-fepilog-vectorization-of-inductions",
+    "-fnt-store",
+    "-fenable-aggressive-gather",
+    "-fscalar-transform",
+    "-fitodcalls",
+    "-fitodcallsbyclone",
+    "-favoid-fpe-causing-opt",
+    "-mllvm", "-enable-strided-vectorization",
+    "-mllvm", "-global-vectorize-slp",
+    "-mllvm", "-enable-loop-vectorization-with-conditions",
+    "-mllvm", "-legalize-vector-library-calls",
+    "-mllvm", "-vectorize-non-contiguous-memory-aggressively",
+    "-mllvm", "-enable-partial-unswitch",
+    "-mllvm", "-aggressive-loop-unswitch",
+    "-mllvm", "-lv-function-specialization",
+    "-mllvm", "-loop-splitting",
+    "-mllvm", "-enable-ipo-loop-split",
+    "-mllvm", "-enable-loop-fusion",
+    "-mllvm", "-enable-loopinterchange",
+    "-mllvm", "-fuse-tile-inner-loop",
+    "-mllvm", "-enable-loop-distribute-adv",
+    "-mllvm", "-enable-X86-prefetching",
+    "-mllvm", "-suppress-fmas",
+    "-mllvm", "-merge-constant",
+    "-mllvm", "-optimize-strided-mem-cost",
+    "-mllvm", "-enable-licm-vrp",
+    "-mllvm", "-function-specialize",
+    "-mllvm", "-do-block-reorder=aggressive",
+    "-freroll-loops",
+    "-mllvm", "-adce-remove-loops",
+    "-mllvm", "-aggressive-ext-opt",
+    "-mllvm", "-consthoist-gep",
+    "-mllvm", "-costmodel-reduxcost",
+    "-mllvm", "-enable-cse-in-irtranslator",
+    "-mllvm", "-enable-cse-in-legalizer",
+    "-mllvm", "-enable-deferred-spilling",
+    "-mllvm", "-enable-dfa-jump-thread",
+    "-mllvm", "-enable-gvn-hoist",
+    "-mllvm", "-gvn-hoist-max-bbs=-1",
+    "-mllvm", "-gvn-hoist-max-depth=-1",
+    "-mllvm", "-gvn-hoist-max-chain-length=-1",
+    "-mllvm", "-enable-interleaved-mem-accesses",
+    "-mllvm", "-enable-masked-interleaved-mem-accesses",
+    "-mllvm", "-enable-ipra",
+    "-mllvm", "-enable-loadstore-runtime-interleave",
+    "-mllvm", "-enable-local-reassign",
+    "-mllvm", "-enable-loop-flatten",
+    "-mllvm", "-enable-loop-versioning-licm",
+    "-mllvm", "-enable-unroll-and-jam",
+    "-mllvm", "-exhaustive-register-search",
+    # "-mllvm", "-inline-enable-cost-benefit-analysis",
+    "-mllvm", "-interleave-small-loop-scalar-reduction",
+    "-mllvm", "-loop-rotate-multi",
+    "-mllvm", "-misched=ilpmax",
+    "-mllvm", "-pre-RA-sched=list-ilp",
+    "-mllvm", "-scalar-evolution-use-expensive-range-sharpening",
+    "-mllvm", "-slp-vectorize-hor-store",
+    "-mllvm", "-unroll-runtime-multi-exit",
+    "-mllvm", "-vectorizer-maximize-bandwidth",
+    "-Rpass=vector",
+  ]
+
   if (is_android) {
     # TODO(jdduke) Re-enable on mips after resolving linking
     # issues with libc++ (crbug.com/456380).
@@ -2417,7 +2493,7 @@ config("optimize") {
     # vectorization while otherwise optimizing for size.
     rustflags = [ "-Copt-level=s" ]
   } else {
-    cflags = [ "-O2" ] + common_optimize_on_cflags
+    cflags = [ "-O3" ] + common_optimize_on_cflags
 
     # The `-O3` for clang turns on extra optimizations compared to the standard
     # `-O2`. But for rust, `-Copt-level=3` is the default and is thus reliable
@@ -2488,7 +2564,7 @@ config("optimize_max") {
     } else if (optimize_for_fuzzing) {
       cflags = [ "-O1" ] + common_optimize_on_cflags
     } else {
-      cflags = [ "-O2" ] + common_optimize_on_cflags
+      cflags = [ "-O3" ] + common_optimize_on_cflags
     }
     rustflags = [ "-Copt-level=3" ]
   }
diff --git a/chrome/installer/linux/common/repo.cron b/chrome/installer/linux/common/repo.cron
index 15bbf25f2b443..33e25bbaba36b 100755
--- a/chrome/installer/linux/common/repo.cron
+++ b/chrome/installer/linux/common/repo.cron
@@ -16,29 +16,3 @@
 # setting "repo_add_once" and/or "repo_reenable_on_distupgrade" to "true" or
 # "false" as desired. An empty $DEFAULTS_FILE is the same as setting both values
 # to "false".
-
-@@include@@../common/variables.include
-
-@@include@@apt.include
-
-## MAIN ##
-if [ -r "$DEFAULTS_FILE" ]; then
-  . "$DEFAULTS_FILE"
-fi
-
-install_key
-
-if [ "$repo_add_once" = "true" ]; then
-  create_sources_lists
-  RES=$?
-  # Sources creation succeeded, so stop trying.
-  if [ $RES -ne 2 ]; then
-    sed -i -e 's/[[:space:]]*repo_add_once=.*/repo_add_once="false"/' "$DEFAULTS_FILE"
-  fi
-else
-  update_bad_sources
-fi
-
-if [ "$repo_reenable_on_distupgrade" = "true" ]; then
-  handle_distro_upgrade
-fi
diff --git a/chrome/installer/linux/debian/build.sh b/chrome/installer/linux/debian/build.sh
index 7cd40b9c37cce..743f2889ceedf 100755
--- a/chrome/installer/linux/debian/build.sh
+++ b/chrome/installer/linux/debian/build.sh
@@ -121,7 +121,7 @@ do_package() {
   local PACKAGEFILE="${PACKAGE}-${CHANNEL}_${VERSIONFULL}_${ARCHITECTURE}.deb"
   if [ ${IS_OFFICIAL_BUILD} -ne 0 ]; then
     (cd "${TMPFILEDIR}" && ar -x "${TMPFILEDIR}/${PACKAGEFILE}")
-    xz -z9 -T0 --lzma2='dict=256MiB' "${TMPFILEDIR}/data.tar"
+    xz -z6 -T0 --memory=90% "${TMPFILEDIR}/data.tar"
     xz -z0 "${TMPFILEDIR}/control.tar"
     ar -d "${TMPFILEDIR}/${PACKAGEFILE}" control.tar data.tar
     ar -r "${TMPFILEDIR}/${PACKAGEFILE}" "${TMPFILEDIR}/control.tar.xz" \
diff --git a/chrome/installer/linux/debian/postinst b/chrome/installer/linux/debian/postinst
index c1db53387a9c8..631fe61eefa72 100755
--- a/chrome/installer/linux/debian/postinst
+++ b/chrome/installer/linux/debian/postinst
@@ -54,17 +54,6 @@ update-alternatives --install /usr/bin/gnome-www-browser gnome-www-browser \
 update-alternatives --install /usr/bin/@@PACKAGE_ORIG@@ @@PACKAGE_ORIG@@ \
   /usr/bin/@@USR_BIN_SYMLINK_NAME@@ $PRIORITY
 
-@@include@@../common/apt.include
-
 @@include@@../common/symlinks.include
 
 remove_udev_symlinks
-
-## MAIN ##
-if [ ! -e "$DEFAULTS_FILE" ]; then
-  echo 'repo_add_once="true"' > "$DEFAULTS_FILE"
-  echo 'repo_reenable_on_distupgrade="true"' >> "$DEFAULTS_FILE"
-fi
-
-# Run the cron job immediately to perform repository configuration.
-nohup sh /etc/cron.daily/@@PACKAGE@@ > /dev/null 2>&1 &
diff --git a/chrome/installer/linux/debian/postrm b/chrome/installer/linux/debian/postrm
index 3e1cadc8296ca..32fbab915001f 100755
--- a/chrome/installer/linux/debian/postrm
+++ b/chrome/installer/linux/debian/postrm
@@ -15,22 +15,6 @@ fi
 
 @@include@@../common/variables.include
 
-@@include@@../common/apt.include
-
 @@include@@../common/symlinks.include
 
 remove_udev_symlinks
-
-# Only remove the defaults file if it is not empty. An empty file was probably
-# put there by the sysadmin to disable automatic repository configuration, as
-# per the instructions on the package download page.
-if [ -s "$DEFAULTS_FILE" ]; then
-  # Make sure the package defaults are removed before the repository config,
-  # otherwise it could result in the repository config being removed, but the
-  # package defaults remain and are set to not recreate the repository config.
-  # In that case, future installs won't recreate it and won't get auto-updated.
-  rm "$DEFAULTS_FILE" || exit 1
-fi
-# Remove any Google repository added by the package.
-clean_sources_lists
-uninstall_key
diff --git a/content/gpu/gpu_sandbox_hook_linux.cc b/content/gpu/gpu_sandbox_hook_linux.cc
index a6a9e620b743d..b3f2dc4095e03 100644
--- a/content/gpu/gpu_sandbox_hook_linux.cc
+++ b/content/gpu/gpu_sandbox_hook_linux.cc
@@ -249,6 +249,11 @@ void AddAmdGpuPermissions(std::vector<BrokerFilePermission>* permissions) {
       "/usr/lib64/dri/r300_dri.so",
       "/usr/lib64/dri/r600_dri.so",
       "/usr/lib64/dri/radeonsi_dri.so",
+      // GPU Log Warning Workaround
+      "/usr/share/vulkan/icd.d",
+      "/usr/share/vulkan/icd.d/radeon_icd.x86_64.json"
+      "/etc/vulkan/icd.d",
+      "/etc/vulkan/icd.d/radeon_icd.x86_64.json"
       // Allow libglvnd files and libs.
       "/usr/share/glvnd/egl_vendor.d",
       "/usr/share/glvnd/egl_vendor.d/50_mesa.json",
diff --git a/media/base/supported_types.cc b/media/base/supported_types.cc
index e87266e358f49..aca4c9171bcd2 100644
--- a/media/base/supported_types.cc
+++ b/media/base/supported_types.cc
@@ -219,33 +219,7 @@ bool IsAudioCodecProprietary(AudioCodec codec) {
 #endif  // !BUILDFLAG(USE_PROPRIETARY_CODECS)
 
 bool IsHevcProfileSupported(const VideoType& type) {
-  if (!IsColorSpaceSupported(type.color_space))
-    return false;
-
-#if BUILDFLAG(ENABLE_PLATFORM_HEVC)
-#if BUILDFLAG(PLATFORM_HAS_OPTIONAL_HEVC_SUPPORT)
-#if BUILDFLAG(IS_CHROMEOS_LACROS)
-  // TODO(b/171813538): For Lacros, the supplemental profile cache will be
-  // asking lacros-gpu, but we will be doing decoding in ash-gpu. Until the
-  // codec detection is plumbed through to ash-gpu we can do this extra check
-  // for HEVC support.
-  if (base::CommandLine::ForCurrentProcess()->HasSwitch(
-          switches::kLacrosEnablePlatformHevc)) {
-    return true;
-  }
-#endif  // BUILDFLAG(IS_CHROMEOS_LACROS)
-#if BUILDFLAG(IS_CHROMEOS_ASH)
-  if (!base::FeatureList::IsEnabled(kPlatformHEVCDecoderSupport)) {
-    return false;
-  }
-#endif  // BUILDFLAG(IS_CHROMEOS_ASH)
-  return GetSupplementalProfileCache()->IsProfileSupported(type.profile);
-#else
   return true;
-#endif  // BUIDFLAG(PLATFORM_HAS_OPTIONAL_HEVC_SUPPORT)
-#else
-  return false;
-#endif  // BUILDFLAG(ENABLE_PLATFORM_HEVC)
 }
 
 bool IsVp9ProfileSupported(const VideoType& type) {
@@ -431,7 +405,7 @@ bool IsBuiltInVideoCodec(VideoCodec codec) {
   if (codec == VideoCodec::kVP8)
     return true;
 #if BUILDFLAG(USE_PROPRIETARY_CODECS)
-  if (codec == VideoCodec::kH264)
+  if (codec == VideoCodec::kH264 || codec == VideoCodec::kHEVC)
     return true;
 #endif  // BUILDFLAG(USE_PROPRIETARY_CODECS)
 #endif  // BUILDFLAG(ENABLE_FFMPEG_VIDEO_DECODERS)
diff --git a/media/filters/ffmpeg_video_decoder.cc b/media/filters/ffmpeg_video_decoder.cc
index aaab17bdc3b9c..1ea4fdf3408a2 100644
--- a/media/filters/ffmpeg_video_decoder.cc
+++ b/media/filters/ffmpeg_video_decoder.cc
@@ -76,7 +76,6 @@ static int GetFFmpegVideoDecoderThreadCount(const VideoDecoderConfig& config) {
     case VideoCodec::kUnknown:
     case VideoCodec::kVC1:
     case VideoCodec::kMPEG2:
-    case VideoCodec::kHEVC:
     case VideoCodec::kVP9:
     case VideoCodec::kAV1:
     case VideoCodec::kDolbyVision:
@@ -88,6 +87,7 @@ static int GetFFmpegVideoDecoderThreadCount(const VideoDecoderConfig& config) {
       // No extra threads for these codecs.
       break;
 
+    case VideoCodec::kHEVC:
     case VideoCodec::kH264:
     case VideoCodec::kVP8:
       // Normalize to three threads for 1080p content, then scale linearly
diff --git a/third_party/blink/renderer/core/css/properties/longhands/longhands_custom.cc b/third_party/blink/renderer/core/css/properties/longhands/longhands_custom.cc
index 4abd08f7218fb..a8c37acf6aab6 100644
--- a/third_party/blink/renderer/core/css/properties/longhands/longhands_custom.cc
+++ b/third_party/blink/renderer/core/css/properties/longhands/longhands_custom.cc
@@ -9550,7 +9550,7 @@ const CSSValue* MaskSize::CSSValueFromComputedStyleInternal(
     const ComputedStyle& style,
     const LayoutObject*,
     bool allow_visited_style) const {
-  CHECK(RuntimeEnabledFeatures::CSSMaskingInteropEnabled());
+  // CHECK(RuntimeEnabledFeatures::CSSMaskingInteropEnabled());
   const FillLayer& fill_layer = style.MaskLayers();
   return ComputedStyleUtils::BackgroundImageOrWebkitMaskSize(style, fill_layer);
 }
diff --git a/tools/cfi/ignores.txt b/tools/cfi/ignores.txt
index 73080483ab32b..9304584dedea4 100644
--- a/tools/cfi/ignores.txt
+++ b/tools/cfi/ignores.txt
@@ -144,6 +144,8 @@ type:sandbox::TargetServices
 
 [cfi-icall]
 
+fun:ft_size_reset_iterator
+
 ######### Cross-DSO icalls using dynamically resolved symbols crbug.com/771365
 
 # ANGLE
diff --git a/tools/clang/scripts/build.py b/tools/clang/scripts/build.py
index 880407b491b69..1d06944513045 100755
--- a/tools/clang/scripts/build.py
+++ b/tools/clang/scripts/build.py
@@ -40,7 +40,7 @@ from update import (CDS_URL, CHROMIUM_DIR, CLANG_REVISION, LLVM_BUILD_DIR,
                     FORCE_HEAD_REVISION_FILE, PACKAGE_VERSION, RELEASE_VERSION,
                     STAMP_FILE, THIS_DIR, DownloadUrl, DownloadAndUnpack,
                     DownloadAndUnpackPackage, EnsureDirExists, GetDefaultHostOs,
-                    ReadStampFile, RmTree, WriteStampFile)
+                    ReadStampFile, RmTree, WriteStampFile, MIMALLOC_URL)
 
 # Path constants. (All of these should be absolute paths.)
 THIRD_PARTY_DIR = os.path.join(CHROMIUM_DIR, 'third_party')
@@ -78,6 +78,8 @@ BUG_REPORT_URL = ('https://crbug.com in the Tools>LLVM component,'
 LIBXML2_VERSION = 'libxml2-v2.9.12'
 ZSTD_VERSION = 'zstd-1.5.5'
 
+MIMALLOC_LIB = os.path.abspath(os.path.join(LLVM_DIR, '..', 'llvm-build-tools/mimalloc-2.1.2')) + '/build/mimalloc.o '
+
 win_sdk_dir = None
 def GetWinSDKDir():
   """Get the location of the current SDK."""
@@ -164,10 +166,12 @@ def CheckoutGitRepo(name, git_url, commit, dir):
     os.chdir(dir)
     # git diff-index --quiet returns success when there is no diff.
     # Also check that the first commit is reachable.
-    if (RunCommand(['git', 'diff-index', '--quiet', 'HEAD'], fail_hard=False)
+    if (RunCommand(['git', 'checkout', '-f'], fail_hard=False)
+        and RunCommand(['git', 'diff-index', '--quiet', 'HEAD'], fail_hard=False)
         and RunCommand(['git', 'fetch'], fail_hard=False)
         and RunCommand(['git', 'checkout', commit], fail_hard=False)
-        and RunCommand(['git', 'clean', '-f'], fail_hard=False)):
+        and RunCommand(['git', 'clean', '-fd'], fail_hard=False)):
+        # and RunCommand(['git', 'apply', '/mnt/raid0/llvm.patch'], fail_hard=False)):
       return
 
     # If we can't use the current repo, delete it.
@@ -179,7 +183,8 @@ def CheckoutGitRepo(name, git_url, commit, dir):
 
   if RunCommand(clone_cmd, fail_hard=False):
     os.chdir(dir)
-    if RunCommand(['git', 'checkout', commit], fail_hard=False):
+    if (RunCommand(['git', 'checkout', commit], fail_hard=False)):
+      # and RunCommand(['git', 'apply', '/mnt/raid0/llvm.patch'], fail_hard=False)):
       return
 
   print('CheckoutGitRepo failed.')
@@ -377,6 +382,8 @@ def BuildLibXml2():
           '-DLIBXML2_WITH_XPATH=OFF',
           '-DLIBXML2_WITH_XPTR=OFF',
           '-DLIBXML2_WITH_ZLIB=OFF',
+          '-DCMAKE_C_FLAGS=-O3 -DNDEBUG -w -march=x86-64-v3 -pipe ',
+          '-DCMAKE_CXX_FLAGS=-O3 -DNDEBUG -w -march=x86-64-v3 -pipe ',
           '..',
       ],
       setenv=True)
@@ -455,6 +462,8 @@ def BuildZStd():
           '-DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded',  # /MT to match LLVM.
           '-DZSTD_BUILD_SHARED=OFF',
           '../build/cmake',
+          '-DCMAKE_C_FLAGS=-O3 -DNDEBUG -w -march=x86-64-v3 -pipe ',
+          '-DCMAKE_CXX_FLAGS=-O3 -DNDEBUG -w -march=x86-64-v3 -pipe ',
       ],
       setenv=True)
   RunCommand(['ninja', 'install'], setenv=True)
@@ -474,6 +483,48 @@ def BuildZStd():
   return extra_cmake_flags, extra_cflags
 
 
+class LibMimallocDirs:
+  """
+  The set of directories where zstd is located.
+
+  Includes the diractories where the source is unpacked, where it is built,
+  and installed.
+  """
+  def __init__(self):
+    self.unzip_dir = LLVM_BUILD_TOOLS_DIR
+    self.src_dir = os.path.join(self.unzip_dir, 'mimalloc-2.1.2')
+    self.build_dir = os.path.join(self.src_dir, 'build')
+
+def BuildLibMimalloc():
+  """Download and build mimalloc"""
+
+  dirs = LibMimallocDirs()
+  if os.path.exists(dirs.src_dir):
+    RmTree(dirs.src_dir)
+  DownloadAndUnpack(MIMALLOC_URL, dirs.unzip_dir)
+  os.mkdir(dirs.build_dir)
+  os.chdir(dirs.build_dir)
+
+  RunCommand(
+      [
+          'cmake',
+          '-GNinja',
+          '-DCMAKE_BUILD_TYPE=Release',
+          '-DMI_BUILD_SHARED=OFF',
+          '-DMI_BUILD_STATIC=OFF',
+          '-DMI_BUILD_OBJECT=ON',
+          '-DCMAKE_C_FLAGS=-O3 -DNDEBUG -w -march=x86-64-v3 -pipe ',
+          '-DCMAKE_CXX_FLAGS=-O3 -DNDEBUG -w -march=x86-64-v3 -pipe ',
+          '..',
+      ],
+      setenv=True)
+  RunCommand(['ninja'], setenv=True)
+
+  mimalloc_ldflags = [ '' + MIMALLOC_LIB ]
+
+  return mimalloc_ldflags
+
+
 def DownloadRPMalloc():
   """Download rpmalloc."""
   rpmalloc_dir = os.path.join(LLVM_BUILD_TOOLS_DIR, 'rpmalloc')
@@ -721,8 +772,14 @@ def main():
 
   global CLANG_REVISION, PACKAGE_VERSION, LLVM_BUILD_DIR
 
-  if (args.pgo or args.thinlto) and not args.bootstrap:
-    print('--pgo/--thinlto requires --bootstrap')
+  if not sys.platform.startswith('linux'):
+    print('Customized build script only works with Linux')
+    return 1
+  if not args.bootstrap:
+    print('Customized build script requires --bootstrap')
+    return 1
+  if args.with_goma:
+    print('Customized build script does not support --with-goma')
     return 1
   if args.with_android and not os.path.exists(ANDROID_NDK_DIR):
     print('Android NDK not found at ' + ANDROID_NDK_DIR)
@@ -804,14 +861,12 @@ def main():
   # LLVM_ENABLE_LLD).
   cc, cxx, lld = None, None, None
 
-  cflags = []
-  cxxflags = []
-  ldflags = []
+  cflags = [ '-O3 -DNDEBUG -march=x86-64-v3 -w -fdata-sections -ffunction-sections -mllvm -unroll-max-iteration-count-to-analyze=100 ' ]
+  cxxflags = [ '-O3 -DNDEBUG -march=x86-64-v3 -w -fdata-sections -ffunction-sections -mllvm -unroll-max-iteration-count-to-analyze=100 ' ]
+  ldflags = [ '-fuse-ld=lld -Wl,-z,keep-text-section-prefix -pthread -w -Wl,-O2 -Wl,--gc-sections -Wl,--icf=all ' ]
 
-  targets = 'AArch64;ARM;LoongArch;Mips;PowerPC;RISCV;SystemZ;WebAssembly;X86'
-  projects = 'clang;lld;clang-tools-extra'
-  if args.bolt:
-    projects += ';bolt'
+  targets = 'AArch64;ARM;X86'
+  projects = 'clang;lld;clang-tools-extra;polly;bolt'
 
   pic_default = sys.platform == 'win32'
   pic_mode = 'ON' if args.pic or pic_default else 'OFF'
@@ -823,7 +878,7 @@ def main():
       '-DLLVM_ENABLE_PROJECTS=' + projects,
       '-DLLVM_ENABLE_RUNTIMES=compiler-rt',
       '-DLLVM_TARGETS_TO_BUILD=' + targets,
-      f'-DLLVM_ENABLE_PIC={pic_mode}',
+      '-DLLVM_ENABLE_PIC=ON'
       '-DLLVM_ENABLE_TERMINFO=OFF',
       '-DLLVM_ENABLE_Z3_SOLVER=OFF',
       '-DCLANG_PLUGIN_SUPPORT=OFF',
@@ -851,7 +906,7 @@ def main():
   else:
     base_cmake_args += ['-DLLVM_ENABLE_UNWIND_TABLES=OFF']
 
-  # See https://crbug.com/1302636#c49 - #c56 -- intercepting crypt_r() does not
+  # Se*e https://crbug.com/1302636#c49 - #c56 -- intercepting crypt_r() does not
   # work with the sysroot for not fully understood reasons. Disable it.
   sanitizers_override = [
     '-DSANITIZER_OVERRIDE_INTERCEPTORS',
@@ -923,6 +978,10 @@ def main():
     base_cmake_args.append('-DLLVM_WINSYSROOT="%s"' %
                            os.path.dirname(os.path.dirname(GetWinSDKDir())))
 
+  #Build mimalloc
+  libmimalloc_ldflags = BuildLibMimalloc()
+  # ldflags += libmimalloc_ldflags
+
   # Statically link libxml2 to make lld-link not require mt.exe on Windows,
   # and to make sure lld-link output on other platforms is identical to
   # lld-link on Windows (for cross-builds).
@@ -960,16 +1019,14 @@ def main():
       bootstrap_targets += ';ARM;AArch64'
     bootstrap_args = base_cmake_args + goma_cmake_args + [
         '-DLLVM_TARGETS_TO_BUILD=' + bootstrap_targets,
-        '-DLLVM_ENABLE_PROJECTS=clang;lld',
+        '-DLLVM_ENABLE_PROJECTS=clang;lld;polly',
         '-DLLVM_ENABLE_RUNTIMES=' + ';'.join(runtimes),
         '-DCMAKE_INSTALL_PREFIX=' + LLVM_BOOTSTRAP_INSTALL_DIR,
-        '-DCMAKE_C_FLAGS=' + ' '.join(cflags),
-        '-DCMAKE_CXX_FLAGS=' + ' '.join(cxxflags),
-        '-DCMAKE_EXE_LINKER_FLAGS=' + ' '.join(ldflags),
-        '-DCMAKE_SHARED_LINKER_FLAGS=' + ' '.join(ldflags),
-        '-DCMAKE_MODULE_LINKER_FLAGS=' + ' '.join(ldflags),
-        # Ignore args.disable_asserts for the bootstrap compiler.
-        '-DLLVM_ENABLE_ASSERTIONS=ON',
+        '-DCMAKE_C_FLAGS= ' + ' '.join(cflags),
+        '-DCMAKE_CXX_FLAGS= ' + ' '.join(cxxflags),
+        '-DCMAKE_EXE_LINKER_FLAGS=' + MIMALLOC_LIB + ' '.join(ldflags),
+        '-DCMAKE_SHARED_LINKER_FLAGS= ' + ' '.join(ldflags),
+        '-DCMAKE_MODULE_LINKER_FLAGS= ' + ' '.join(ldflags),
     ]
     # PGO needs libclang_rt.profile but none of the other compiler-rt stuff.
     bootstrap_args.extend([
@@ -1020,10 +1077,10 @@ def main():
     os.chdir(LLVM_INSTRUMENTED_DIR)
 
     instrument_args = base_cmake_args + [
-        '-DLLVM_ENABLE_PROJECTS=clang',
-        '-DCMAKE_C_FLAGS=' + ' '.join(cflags),
-        '-DCMAKE_CXX_FLAGS=' + ' '.join(cxxflags),
-        '-DCMAKE_EXE_LINKER_FLAGS=' + ' '.join(ldflags),
+        '-DLLVM_ENABLE_PROJECTS=clang;polly',
+        '-DCMAKE_C_FLAGS=-mllvm -vp-counters-per-site=3 ' + ' '.join(cflags),
+        '-DCMAKE_CXX_FLAGS=-mllvm -vp-counters-per-site=3 ' + ' '.join(cxxflags),
+        '-DCMAKE_EXE_LINKER_FLAGS=' + MIMALLOC_LIB + ' '.join(ldflags),
         '-DCMAKE_SHARED_LINKER_FLAGS=' + ' '.join(ldflags),
         '-DCMAKE_MODULE_LINKER_FLAGS=' + ' '.join(ldflags),
         # Build with instrumentation.
@@ -1065,8 +1122,11 @@ def main():
     with open(training_source, 'wb') as f:
       DownloadUrl(CDS_URL + '/' + training_source, f)
     train_cmd = [os.path.join(LLVM_INSTRUMENTED_DIR, 'bin', 'clang++'),
-                '-target', 'x86_64-unknown-unknown', '-O2', '-g', '-std=c++14',
-                 '-fno-exceptions', '-fno-rtti', '-w', '-c', training_source]
+                 '-target', 'x86_64-unknown-unknown', '-O3', '-g', '-std=c++14',
+                 '-march=x86-64-v3', '-ffp-contract=fast', '-mllvm', '-polly',
+                 '-fmerge-all-constants', '-fdata-sections', '-ffunction-sections',
+                 '-fno-exceptions', '-fno-rtti', '-w',
+                 '-c', training_source]
     if sys.platform == 'darwin':
       train_cmd.extend(['-isysroot', isysroot])
     RunCommand(train_cmd, setenv=True)
@@ -1105,7 +1165,7 @@ def main():
   # Keep static relocations in the executable for BOLT to analyze. Resolve all
   # symbols on program start to allow BOLT's PLT optimization.
   if args.bolt:
-    ldflags += ['-Wl,--emit-relocs', '-Wl,-znow']
+    ldflags += ['-Wl,--emit-relocs', '-Wl,-znow', ]
 
   chrome_tools = []
   if not args.no_tools:
@@ -1118,7 +1178,7 @@ def main():
   cmake_args = base_cmake_args + [
       '-DCMAKE_C_FLAGS=' + ' '.join(cflags),
       '-DCMAKE_CXX_FLAGS=' + ' '.join(cxxflags),
-      '-DCMAKE_EXE_LINKER_FLAGS=' + ' '.join(ldflags),
+      '-DCMAKE_EXE_LINKER_FLAGS=' + MIMALLOC_LIB + ' '.join(ldflags),
       '-DCMAKE_SHARED_LINKER_FLAGS=' + ' '.join(ldflags),
       '-DCMAKE_MODULE_LINKER_FLAGS=' + ' '.join(ldflags),
       '-DCMAKE_INSTALL_PREFIX=' + final_install_dir,
@@ -1133,7 +1193,24 @@ def main():
   if args.pgo:
     cmake_args.append('-DLLVM_PROFDATA_FILE=' + LLVM_PROFDATA_FILE)
   if args.thinlto:
-    cmake_args.append('-DLLVM_ENABLE_LTO=Thin')
+    cmake_args.append( '-DLLVM_ENABLE_LTO=Thin' )
+    cmake_args.append( '-DLLVM_PARALLEL_LINK_JOBS=16' )
+    cmake_args.append( '-DCMAKE_C_FLAGS=-flto=thin -fno-split-lto-unit ' + ' '.join(cflags) )
+    cmake_args.append( '-DCMAKE_CXX_FLAGS=-flto=thin -fno-split-lto-unit ' + ' '.join(cxxflags) )
+    cmake_args.append( '-DCMAKE_EXE_LINKER_FLAGS=-flto=thin -Wl,-mllvm,-import-instr-limit -Wl,--lto-O3 -Wl,--lto-CGO3 -Wl,--thinlto-jobs=all -Wl,-mllvm,-unroll-max-iteration-count-to-analyze=100 -Wl,-mllvm,-polly ' + ' '.join(ldflags) )
+    cmake_args.append( '-DCMAKE_SHARED_LINKER_FLAGS=-flto=thin -Wl,-mllvm,-import-instr-limit=30 -Wl,--lto-O3 -Wl,--lto-CGO3 -Wl,--thinlto-jobs=all -Wl,-mllvm,-unroll-max-iteration-count-to-analyze=100 -Wl,-mllvm,-polly ' + ' '.join(ldflags) )
+    cmake_args.append( '-DCMAKE_MODULE_LINKER_FLAGS=-flto=thin -Wl,-mllvm,-import-instr-limit=30 -Wl,--lto-O3 -Wl,--lto-CGO3 -Wl,--thinlto-jobs=all -Wl,-mllvm,-unroll-max-iteration-count-to-analyze=100 -Wl,-mllvm,-polly ' + ' '.join(ldflags) )
+    if args.pgo:
+      cmake_args.append( '-DCMAKE_EXE_LINKER_FLAGS=-Wl,-mllvm,-enable-ext-tsp-block-placement ' + ' '.join(ldflags) )
+      cmake_args.append( '-DCMAKE_SHARED_LINKER_FLAGS=-Wl,-mllvm,-enable-ext-tsp-block-placement ' + ' '.join(ldflags) )
+      cmake_args.append( '-DCMAKE_MODULE_LINKER_FLAGS=-Wl,-mllvm,-enable-ext-tsp-block-placement ' + ' '.join(ldflags) )
+  else:
+    cmake_args.append( '-DCMAKE_C_FLAGS=-mllvm -polly ' + ' '.join(cflags) )
+    cmake_args.append( '-DCMAKE_CXX_FLAGS=-mllvm -polly ' + ' '.join(cxxflags) )
+    if args.pgo:
+      cmake_args.append( '-DCMAKE_C_FLAGS=-mllvm -enable-ext-tsp-block-placement ' + ' '.join(cflags) )
+      cmake_args.append( '-DCMAKE_CXX_FLAGS=-mllvm -enable-ext-tsp-block-placement ' + ' '.join(cxxflags) )
+
   if sys.platform == 'win32':
     cmake_args.append('-DLLVM_ENABLE_ZLIB=FORCE_ON')
 
@@ -1438,7 +1515,7 @@ def main():
     # Instrument.
     RunCommand([
         'bin/llvm-bolt', 'bin/clang', '-o', 'bin/clang-bolt.inst',
-        '-instrument', '--instrumentation-file-append-pid',
+        '--lite=false', '-instrument', '--instrumentation-file-append-pid',
         '--instrumentation-file=' +
         os.path.join(bolt_profiles_dir, 'prof.fdata')
     ])
@@ -1454,9 +1531,9 @@ def main():
     bolt_train_cmake_args = base_cmake_args + [
         '-DLLVM_TARGETS_TO_BUILD=X86',
         '-DLLVM_ENABLE_PROJECTS=clang',
-        '-DCMAKE_C_FLAGS=' + ' '.join(cflags),
-        '-DCMAKE_CXX_FLAGS=' + ' '.join(cxxflags),
-        '-DCMAKE_EXE_LINKER_FLAGS=' + ' '.join(ldflags),
+        '-DCMAKE_C_FLAGS=-ffp-contract=fast -mllvm -polly -fmerge-all-constants ' + ' '.join(cflags),
+        '-DCMAKE_CXX_FLAGS=-ffp-contract=fast -mllvm -polly -fmerge-all-constants ' + ' '.join(cxxflags),
+        '-DCMAKE_EXE_LINKER_FLAGS=' + MIMALLOC_LIB + ' '.join(ldflags),
         '-DCMAKE_SHARED_LINKER_FLAGS=' + ' '.join(ldflags),
         '-DCMAKE_MODULE_LINKER_FLAGS=' + ' '.join(ldflags),
         '-DCMAKE_C_COMPILER=' +
@@ -1467,6 +1544,10 @@ def main():
         os.path.join(LLVM_BUILD_DIR, 'bin/clang-bolt.inst'),
         '-DCMAKE_ASM_COMPILER_ID=Clang',
     ]
+    if args.pgo:
+      cmake_args.append('-DLLVM_PROFDATA_FILE=' + LLVM_PROFDATA_FILE)
+      cmake_args.append( '-DCMAKE_C_FLAGS=-mllvm -enable-ext-tsp-block-placement ' + ' '.join(cflags) )
+      cmake_args.append( '-DCMAKE_CXX_FLAGS=-mllvm -enable-ext-tsp-block-placement ' + ' '.join(cxxflags) )
     RunCommand(['cmake'] + bolt_train_cmake_args +
                [os.path.join(LLVM_DIR, 'llvm')])
     RunCommand([
@@ -1483,9 +1564,14 @@ def main():
     ])
     RunCommand([
         'bin/llvm-bolt', 'bin/clang', '-o', 'bin/clang-bolt.opt', '-data',
-        'merged.fdata', '-reorder-blocks=ext-tsp', '-reorder-functions=hfsort+',
-        '-split-functions', '-split-all-cold', '-split-eh', '-dyno-stats',
-        '-icf=1', '-use-gnu-stack', '-use-old-text'
+        'merged.fdata', '--reorder-blocks=ext-tsp', '--reorder-functions=hfsort+',
+        '--split-functions', '--split-all-cold', '--split-eh', '--dyno-stats',
+        '--icf', '--use-gnu-stack', '--use-old-text', '--peepholes=all',
+        '--elim-link-veneers', '--group-stubs', '--align-blocks', '--sctc-mode=heuristic',
+        '--jump-tables=aggressive', '--simplify-conditional-tail-calls',
+        '--simplify-rodata-loads', '--align-macro-fusion=all', '--eliminate-unreachable',
+       '--tail-duplication=cache', '--indirect-call-promotion=all', '--icp-eliminate-loads',
+        '--hot-data', '--x86-strip-redundant-address-size', '--no-huge-pages', '--lite=false',
     ])
 
     # Overwrite clang, preserving its timestamp so ninja doesn't rebuild it.
diff --git a/tools/clang/scripts/update.py b/tools/clang/scripts/update.py
index 2b2dc1a58d624..2cbe1f8f5c8e6 100755
--- a/tools/clang/scripts/update.py
+++ b/tools/clang/scripts/update.py
@@ -45,6 +45,8 @@ RELEASE_VERSION = '18'
 CDS_URL = os.environ.get('CDS_CLANG_BUCKET_OVERRIDE',
     'https://commondatastorage.googleapis.com/chromium-browser-clang')
 
+MIMALLOC_URL = 'https://github.com/microsoft/mimalloc/archive/refs/tags/v2.1.2.tar.gz'
+
 # Path constants. (All of these should be absolute paths.)
 THIS_DIR = os.path.abspath(os.path.dirname(__file__))
 CHROMIUM_DIR = os.path.abspath(os.path.join(THIS_DIR, '..', '..', '..'))
