diff --git a/tools/clang/scripts/build.py b/tools/clang/scripts/build.py
index 2e84b05083e66..a9ab82e1da406 100755
--- a/tools/clang/scripts/build.py
+++ b/tools/clang/scripts/build.py
@@ -377,6 +377,7 @@ def BuildLibXml2():
           '-DLIBXML2_WITH_XPATH=OFF',
           '-DLIBXML2_WITH_XPTR=OFF',
           '-DLIBXML2_WITH_ZLIB=OFF',
+          '-DCMAKE_C_FLAGS_RELEASE=-O3 -DNDEBUG -w -march=x86-64-v3 -mprefer-avx128 -ffp-contract=fast -pipe ',
           '..',
       ],
       setenv=True)
@@ -454,6 +455,8 @@ def BuildZStd():
           '-DCMAKE_OSX_ARCHITECTURES=arm64;x86_64',
           '-DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded',  # /MT to match LLVM.
           '-DZSTD_BUILD_SHARED=OFF',
+          '-DCMAKE_C_FLAGS_RELEASE=-O3 -DNDEBUG -w -march=x86-64-v3 -mprefer-avx128 -ffp-contract=fast -pipe ',
+          '-DCMAKE_CXX_FLAGS_RELEASE=-O3 -DNDEBUG -w -march=x86-64-v3 -mprefer-avx128 -ffp-contract=fast -pipe ',
           '../build/cmake',
       ],
       setenv=True)
@@ -726,8 +729,11 @@ def main():
     global RELEASE_VERSION
     RELEASE_VERSION = '18'
 
-  if (args.pgo or args.thinlto) and not args.bootstrap:
-    print('--pgo/--thinlto requires --bootstrap')
+  if not args.bootstrap:
+    print('Customized build script requires --bootstrap')
+    return 1
+  if args.with_goma:
+    print('Customized build script does not support --with-goma')
     return 1
   if args.with_android and not os.path.exists(ANDROID_NDK_DIR):
     print('Android NDK not found at ' + ANDROID_NDK_DIR)
@@ -809,14 +815,12 @@ def main():
   # LLVM_ENABLE_LLD).
   cc, cxx, lld = None, None, None
 
-  cflags = []
-  cxxflags = []
-  ldflags = []
+  cflags = [ '-O3 -DNDEBUG -w -march=x86-64-v3 -mprefer-vector-width=128 -ffp-contract=fast' ]
+  cxxflags = [ '-O3 -DNDEBUG -w -march=x86-64-v3 -mprefer-vector-width=128 -ffp-contract=fast' ]
+  ldflags = [ '-fuse-ld=lld' ]
 
   targets = 'AArch64;ARM;LoongArch;Mips;PowerPC;RISCV;SystemZ;WebAssembly;X86'
-  projects = 'clang;lld;clang-tools-extra'
-  if args.bolt:
-    projects += ';bolt'
+  projects = 'clang;lld;clang-tools-extra;polly;bolt'
 
   pic_default = sys.platform == 'win32'
   pic_mode = 'ON' if args.pic or pic_default else 'OFF'
@@ -828,7 +832,7 @@ def main():
       '-DLLVM_ENABLE_PROJECTS=' + projects,
       '-DLLVM_ENABLE_RUNTIMES=compiler-rt',
       '-DLLVM_TARGETS_TO_BUILD=' + targets,
-      f'-DLLVM_ENABLE_PIC={pic_mode}',
+      '-DLLVM_ENABLE_PIC=ON',
       '-DLLVM_ENABLE_TERMINFO=OFF',
       '-DLLVM_ENABLE_Z3_SOLVER=OFF',
       '-DCLANG_PLUGIN_SUPPORT=OFF',
@@ -973,8 +977,6 @@ def main():
         '-DCMAKE_EXE_LINKER_FLAGS=' + ' '.join(ldflags),
         '-DCMAKE_SHARED_LINKER_FLAGS=' + ' '.join(ldflags),
         '-DCMAKE_MODULE_LINKER_FLAGS=' + ' '.join(ldflags),
-        # Ignore args.disable_asserts for the bootstrap compiler.
-        '-DLLVM_ENABLE_ASSERTIONS=ON',
     ]
     # PGO needs libclang_rt.profile but none of the other compiler-rt stuff.
     bootstrap_args.extend([
@@ -1026,8 +1028,8 @@ def main():
 
     instrument_args = base_cmake_args + [
         '-DLLVM_ENABLE_PROJECTS=clang',
-        '-DCMAKE_C_FLAGS=' + ' '.join(cflags),
-        '-DCMAKE_CXX_FLAGS=' + ' '.join(cxxflags),
+        '-DCMAKE_C_FLAGS=-mllvm -vp-counters-per-site=3 ' + ' '.join(cflags),
+        '-DCMAKE_CXX_FLAGS=-mllvm -vp-counters-per-site=3 ' + ' '.join(cxxflags),
         '-DCMAKE_EXE_LINKER_FLAGS=' + ' '.join(ldflags),
         '-DCMAKE_SHARED_LINKER_FLAGS=' + ' '.join(ldflags),
         '-DCMAKE_MODULE_LINKER_FLAGS=' + ' '.join(ldflags),
@@ -1070,7 +1072,8 @@ def main():
     with open(training_source, 'wb') as f:
       DownloadUrl(CDS_URL + '/' + training_source, f)
     train_cmd = [os.path.join(LLVM_INSTRUMENTED_DIR, 'bin', 'clang++'),
-                '-target', 'x86_64-unknown-unknown', '-O2', '-g', '-std=c++14',
+                '-target', 'x86_64-unknown-unknown', '-O3', '-g', '-std=c++14',
+                '-march=x86-64-v3', '-mprefer-vector-width=128', '-ffp-contract=fast',
                  '-fno-exceptions', '-fno-rtti', '-w', '-c', training_source]
     if sys.platform == 'darwin':
       train_cmd.extend(['-isysroot', isysroot])
@@ -1138,7 +1141,24 @@ def main():
   if args.pgo:
     cmake_args.append('-DLLVM_PROFDATA_FILE=' + LLVM_PROFDATA_FILE)
   if args.thinlto:
-    cmake_args.append('-DLLVM_ENABLE_LTO=Thin')
+    cmake_args.append( '-DLLVM_ENABLE_LTO=Thin' )
+    cmake_args.append( '-DLLVM_PARALLEL_LINK_JOBS=16' )
+    cmake_args.append( '-DCMAKE_C_FLAGS=-flto=thin -fno-split-lto-unit -fwhole-program-vtables ' + ' '.join(cflags) )
+    cmake_args.append( '-DCMAKE_CXX_FLAGS=-flto=thin -fno-split-lto-unit -fwhole-program-vtables ' + ' '.join(cxxflags) )
+    cmake_args.append( '-DCMAKE_EXE_LINKER_FLAGS=-flto=thin -fwhole-program-vtables -Wl,-mllvm,-import-instr-limit=30 -Wl,--lto-O3 -Wl,--lto-CGO3 -Wl,--thinlto-jobs=all ' + ' '.join(ldflags) )
+    cmake_args.append( '-DCMAKE_SHARED_LINKER_FLAGS=-flto=thin -fwhole-program-vtables -Wl,-mllvm,-import-instr-limit=30 -Wl,--lto-O3 -Wl,--lto-CGO3 -Wl,--thinlto-jobs=all ' + ' '.join(ldflags) )
+    cmake_args.append( '-DCMAKE_MODULE_LINKER_FLAGS=-flto=thin -fwhole-program-vtables -Wl,-mllvm,-import-instr-limit=30 -Wl,--lto-O3 -Wl,--lto-CGO3 -Wl,--thinlto-jobs=all ' + ' '.join(ldflags) )
+    if args.pgo:
+      cmake_args.append( '-DCMAKE_MODULE_LINKER_FLAGS=-Wl,-mllvm,-enable-ext-tsp-block-placement=1 ' + ' '.join(ldflags) )
+  else:
+    cmake_args.append( '-DCMAKE_C_FLAGS=' + ' '.join(cflags) )
+    cmake_args.append( '-DCMAKE_CXX_FLAGS=' + ' '.join(cxxflags) )
+    if args.pgo:
+      cmake_args.append( '-DCMAKE_C_FLAGS=-mllvm -enable-ext-tsp-block-placement=1 ' + ' '.join(cxxflags) )
+      cmake_args.append( '-DCMAKE_CXX_FLAGS=-mllvm -enable-ext-tsp-block-placement=1 ' + ' '.join(cxxflags) )
+    cmake_args.append( '-DCMAKE_EXE_LINKER_FLAGS=' + ' '.join(ldflags) )
+    cmake_args.append( '-DCMAKE_SHARED_LINKER_FLAGS=' + ' '.join(ldflags) )
+    cmake_args.append( '-DCMAKE_MODULE_LINKER_FLAGS=' + ' '.join(ldflags) )
   if sys.platform == 'win32':
     cmake_args.append('-DLLVM_ENABLE_ZLIB=FORCE_ON')
 
@@ -1443,7 +1463,7 @@ def main():
     # Instrument.
     RunCommand([
         'bin/llvm-bolt', 'bin/clang', '-o', 'bin/clang-bolt.inst',
-        '-instrument', '--instrumentation-file-append-pid',
+        '--lite=false', '-instrument', '--instrumentation-file-append-pid',
         '--instrumentation-file=' +
         os.path.join(bolt_profiles_dir, 'prof.fdata')
     ])
@@ -1488,9 +1508,14 @@ def main():
     ])
     RunCommand([
         'bin/llvm-bolt', 'bin/clang', '-o', 'bin/clang-bolt.opt', '-data',
-        'merged.fdata', '-reorder-blocks=ext-tsp', '-reorder-functions=hfsort+',
-        '-split-functions', '-split-all-cold', '-split-eh', '-dyno-stats',
-        '-icf=1', '-use-gnu-stack', '-use-old-text'
+        'merged.fdata', '--reorder-blocks=ext-tsp', '--reorder-functions=hfsort+',
+        '--split-functions', '--split-all-cold', '--split-eh', '--dyno-stats',
+        '--icf', '--use-gnu-stack', '--use-old-text', '--peepholes=all',
+        '--elim-link-veneers', '--group-stubs', '--align-blocks', '--sctc-mode=heuristic',
+        '--jump-tables=aggressive', '--simplify-conditional-tail-calls',
+        '--simplify-rodata-loads', '--align-macro-fusion=all', '--eliminate-unreachable',
+       '--tail-duplication=cache', '--indirect-call-promotion=all', '--icp-eliminate-loads',
+        '--hot-data', '--x86-strip-redundant-address-size', '--lite=false',
     ])
 
     # Overwrite clang, preserving its timestamp so ninja doesn't rebuild it.
